# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
image: gradle:6.8.2-jdk15

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
stages:
  - build
  - test
  - release
cache:
  paths:
    - .m2/repository

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

build-and-deploy:
  stage: build
  script: gradle build codeCoverageReport
  artifacts:
    name: "archive-$CI_COMMIT_REF_NAME"
    reports:
      junit: "*/build/test-results/test/TEST-*.xml"
    paths:
      - "*/build/reports/"
      - build/libs/ssg-*.jar
      - build/scripts/ssg
    expire_in: 1 week
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - .gradle

code-coverage-md2html 1/3:
  stage: test
  image: alpine:latest
  script: cat md2html/build/reports/jacoco/test/html/index.html

code-coverage-buildsite 2/3:
  stage: test
  image: alpine:latest
  script: cat buildsite/build/reports/jacoco/test/html/index.html

release:
 stage: release
 image: alpine:latest
 when: manual
 except:
  - tags
 script: release-cli create --name "$CI_COMMIT_TIMESTAMP" --description "$CI_COMMIT_TITLE" --tag-name "$CI_COMMIT_TIMESTAMP" --ref "$CI_COMMIT_SHA" 
